---
// Importar el componente del popup
import PopUpDestino from './PopUpDestino.astro';

const flagMap = {
  Argentina: "images/Flag_of_Argentina.svg.webp",
  Brasil: "images/Flag_of_Brazil.svg.webp",
  Paraguay: "images/Flag_of_Paraguay.svg.png",
  Otros: "images/Flag_default.svg.png", // por si no hay país definido
};

const destinos = [
  { nombre: "Cataratas Argentina", pais: "Argentina", cover: "images/cataradas_del_iguazu.jpg", desc: "Circuitos Superior, Inferior y Garganta del Diablo." },
  { nombre: "Cataratas Brasilera", pais: "Brasil", cover: " images/cataradas_del_brasilera.jpg", desc: "Vistas panorámicas increíbles del lado brasileño." },
  { nombre: "Saltos del Monday Presidente Franco", pais: "Paraguay", cover: " images/Saltos_del_Monday.jpg", desc: "Miradores y pasarelas sobre el río Monday." },
  { nombre: "Saltos del Moconá", pais: "Argentina", cover: " images/saltos-del-moconajpg.webp", desc: "Saltos longitudinales únicos en el mundo." },
  { nombre: "Represa Hidroeléctrica Itaipu Binacional", pais: "Paraguay", cover: " images/itaipu.jpeg", desc: "Una de las centrales hidroeléctricas más grandes del mundo." },
  { nombre: "Minas de Wanda", pais: "Argentina", cover: " images/minas_wanda.jpg", desc: "Piedras semipreciosas y galerías a cielo abierto." },
  { nombre: "Ruinas de San Ignacio", pais: "Argentina", cover: " images/san-ignacio.jpg", desc: "Misión jesuítica, patrimonio histórico." },
  { nombre: "Yerbatera Flor del Jardín", pais: "Argentina", cover: " images/Flor-de-Jardin.jpg", desc: "Proceso de la yerba mate desde la hoja al mate." },
  { nombre: "Bar de Hielo", pais: "Argentina", cover: " images/icebar-iguazu.jpg", desc: "Copas heladas a -10°C; abrigo incluido." },
  { nombre: "Güira Ora", pais: "Argentina", cover: " images/guira-oga-iguazu.jpg", desc: "Centro de rescate de animales de la selva misionera." },
  { nombre: "Aripuca", pais: "Argentina", cover: " images/la-aripuca.jpg", desc: "Estructura gigante hecha con árboles rescatados." },
  { nombre: "Parque das Aves", pais: "Brasil", cover: " images/parque-das-aves-br.jpg", desc: "Santuario de aves en Foz do Iguaçu." },
  { nombre: "Duty Free Shop Puerto Iguazú", pais: "Argentina", cover: " images/duty-free-shop-puerto.jpg", desc: "Ofertas en perfumes, bebidas y más." },
  { nombre: "Catamarán Cruceros Iguazú", pais: "Argentina", cover: " images/cruceros-puerto-iguazu.jpg", desc: "Paseo por el río Iguazú y Paraná." },
  { nombre: "Excursión al Hito de las Tres Fronteras", pais: "Argentina", cover: " images/hito-tres-fronteras.jpg", desc: "Confluencia de Argentina, Brasil y Paraguay." },
  { nombre: "Fly Park Iguazú", pais: "Argentina", cover: " images/fly-park-iguazu.avif", desc: "Tirolinas y actividades al aire libre." },
  { nombre: "Jardín de Los Colibríes", pais: "Brasil", cover: " images/jardin-de-los-picaflores.jpg", desc: "Observación de colibríes en su hábitat." },
  { nombre: "La Casa de Botellas", pais: "Argentina", cover: " images/la-casa-de-botellas.jpg", desc: "Construcción ecológica hecha con botellas." },
  { nombre: "Feirinha Puerto Iguazú", pais: "Argentina", cover: " images/Feria-Ferinha-Iguazu-6.webp", desc: "Picadas, vinos y productos regionales." },
  { nombre: "Yup Star: Roda Gigante de Foz do Iguaçu", pais: "Brasil", cover: " images/Yup-Star-1.jpg", desc: "Rueda gigante con vistas panorámicas." },
  { nombre: "Culturas Park Iguazú", pais: "Argentina", cover: " images/culturas-park.jpg", desc: "Recorrido por culturas originarias." },
  { nombre: "Foz do Iguaçu", pais: "Brasil", cover: " images/foz-de-iguazu-brasil.webp", desc: "Gastronomía y paseos urbanos." },
  { nombre: "Ciudad del Este", pais: "Paraguay", cover: " images/ciudad-del-este.jpg", desc: "Centros comerciales y tecnología." },
  { nombre: "BioCentro Iguazú", pais: "Argentina", cover: " images/biocentro.jpg", desc: "Mariposario y circuito educativo." }
];
---

<section id="destinos" class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
  <!-- Header Section - Responsive -->
  <div class="mb-6">
    <!-- Mobile: Stack vertically and center -->
    <div class="md:hidden text-center space-y-4">
      <div>
        <h3 class="text-2xl font-extrabold text-slate-900">Destinos imperdibles</h3>
        <p class="mt-2 text-slate-600">Elegí tu próxima experiencia por Iguazú, Foz y alrededores.</p>
      </div>
      <div>
        <input type="search" id="buscadorDestinos" placeholder="Buscar destino..." class="w-full max-w-sm rounded-xl border border-slate-300 px-3 py-2 outline-none focus:ring-4 focus:ring-emerald-200" />
      </div>
    </div>
    
    <!-- Desktop: Original layout -->
    <div class="hidden md:flex items-end justify-between gap-6">
      <div>
        <h3 class="text-2xl md:text-3xl font-extrabold text-slate-900">Destinos imperdibles</h3>
        <p class="mt-2 text-slate-600">Elegí tu próxima experiencia por Iguazú, Foz y alrededores.</p>
      </div>
      <div>
        <input type="search" id="buscadorDestinosDesktop" placeholder="Buscar destino..." class="w-64 rounded-xl border border-slate-300 px-3 py-2 outline-none focus:ring-4 focus:ring-emerald-200" />
      </div>
    </div>
  </div>

  <div id="gridDestinos" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
    {destinos.map((d) => (
      <article class="group rounded-2xl overflow-hidden bg-white border border-slate-200 shadow-sm hover:shadow-lg transition transform hover:scale-[1.02]">
        <div class="h-48 w-full bg-slate-200 relative overflow-hidden">
          <img src={d.cover} alt={d.nombre} class="h-full w-full object-cover group-hover:scale-[1.03] transition-transform duration-300" loading="lazy" />
          
          <!-- Bandera circular usando alias -->
          <img 
            src={flagMap[d.pais] || flagMap["Otros"]} 
            alt={d.pais} 
            class="absolute left-3 top-3 h-8 w-10 object-fit aspect-square shadow" 
          />

        </div>

        <div class="p-4">
          <h5 class="text-lg font-bold text-slate-900">{d.nombre}</h5>
          <p class="mt-1 text-sm text-slate-600">{d.desc}</p>

          <div class="mt-4 flex items-center justify-between">
            <button class="ver-detalle-btn text-sm font-semibold text-emerald-700 hover:underline">Ver detalle</button>
            <button class="inline-flex items-center rounded-xl bg-emerald-600 px-3 py-1.5 text-white text-sm hover:bg-emerald-700 transition">Reservar</button>
          </div>
        </div>
      </article>
    ))}
  </div>

  <!-- Incluir el componente del popup -->
  <PopUpDestino />

  <script define:vars={{ destinos, flagMap }}>
    // Variables para controlar cuántos mostrar
    let destinosVisible = 6;
    const incremento = 6;
    let todasLasCards = [];
    let cardsOriginales = [];

    // Función para ocultar cards extra inicialmente
    function inicializarVista() {
      const grid = document.getElementById('gridDestinos');
      if (grid) {
        todasLasCards = Array.from(grid.children);
        cardsOriginales = [...todasLasCards]; // Copia para restaurar después de búsquedas
        
        // Ocultar las que están más allá del límite inicial
        todasLasCards.forEach((card, index) => {
          if (index >= destinosVisible) {
            card.style.display = 'none';
          }
        });
        
        // Agregar funcionalidad a botones "Ver detalle"
        agregarEventosVerDetalle();
        
        // Mostrar botón "Ver más" si hay cards ocultas
        mostrarBotonVerMas();
      }
    }

    // Función para agregar eventos a botones "Ver detalle"
    function agregarEventosVerDetalle() {
      const botonesDetalle = document.querySelectorAll('.ver-detalle-btn');
      botonesDetalle.forEach((btn) => {
        // Evitar duplicar eventos
        if (!btn.hasAttribute('data-detalle-listener')) {
          btn.setAttribute('data-detalle-listener', 'true');
          btn.addEventListener('click', () => {
            const card = btn.closest('article');
            const nombre = card.querySelector('h5')?.textContent || '';
            const desc = card.querySelector('p')?.textContent || '';
            const paisImg = card.querySelector('img[alt]:not([alt="' + nombre + '"])');
            const pais = paisImg ? paisImg.alt : '';
            const cover = card.querySelector('img[alt="' + nombre + '"]')?.src || '';
            
            // Encontrar el destino completo
            const destino = destinos.find(d => d.nombre === nombre);
            if (destino) {
              const destinoCompleto = {
                ...destino,
                bandera: flagMap[destino.pais] || flagMap["Otros"]
              };
              verDetalle(destinoCompleto);
            }
          });
        }
      });
    }

    // Función para mostrar el botón "Ver más"
    function mostrarBotonVerMas() {
      const grid = document.getElementById('gridDestinos');
      
      // Remover botón existente
      const existingBtn = document.getElementById('verMasBtn');
      if (existingBtn) existingBtn.remove();
      
      // Contar cards visibles actualmente
      const cardsVisibles = todasLasCards.filter(card => card.style.display !== 'none');
      const cardsOcultas = todasLasCards.filter(card => card.style.display === 'none');
      
      // Mostrar botón solo si hay más cards para mostrar
      if (cardsOcultas.length > 0) {
        const verMasBtn = document.createElement('div');
        verMasBtn.id = 'verMasBtn';
        verMasBtn.className = 'col-span-full text-center mt-6';
        verMasBtn.innerHTML = `
          <button 
            class="px-6 py-3 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 transition font-semibold"
            onclick="verMasDestinos()"
          >
            Ver más destinos (${cardsOcultas.length} restantes)
          </button>
        `;
        grid.appendChild(verMasBtn);
      }
    }

    // Función para mostrar más destinos
    function verMasDestinos() {
      let mostradas = 0;
      
      todasLasCards.forEach(card => {
        if (card.style.display === 'none' && mostradas < incremento) {
          card.style.display = '';
          mostradas++;
        }
      });
      
      mostrarBotonVerMas();
    }

    // Función modificada para ver detalle - ahora abre el popup
    function verDetalle(destino) {
      // Verificar si la función global existe
      if (window.abrirPopup) {
        window.abrirPopup(destino);
      } else {
        // Fallback al alert si hay algún problema
        alert(`Detalle de: ${destino.nombre}\n\nDescripción: ${destino.desc}\nPaís: ${destino.pais}`);
      }
    }

    // Función modificada para el buscador que respeta el límite
    function buscarDestinos(query) {
      const q = query.toLowerCase();
      let visibles = 0;
      
      cardsOriginales.forEach(card => {
        const title = card.querySelector('h5')?.textContent.toLowerCase() || '';
        const shouldShow = title.includes(q);
        
        if (shouldShow && visibles < destinosVisible) {
          card.style.display = '';
          visibles++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Actualizar array de cards visibles para el botón "Ver más"
      if (q === '') {
        // Si no hay búsqueda, restaurar vista original
        todasLasCards = [...cardsOriginales];
        inicializarVista();
      } else {
        // Si hay búsqueda, filtrar cards
        todasLasCards = cardsOriginales.filter(card => {
          const title = card.querySelector('h5')?.textContent.toLowerCase() || '';
          return title.includes(q);
        });
        mostrarBotonVerMas();
      }
    }

    // Hacer funciones globales para que funcionen con onclick
    window.verMasDestinos = verMasDestinos;

    // Inicializar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', () => {
      // Inicializar vista
      inicializarVista();
      
      // Configurar ambos buscadores (mobile y desktop)
      const inputMobile = document.getElementById('buscadorDestinos');
      const inputDesktop = document.getElementById('buscadorDestinosDesktop');
      
      function handleSearch(e) {
        destinosVisible = 6; // Resetear límite en cada búsqueda
        buscarDestinos(e.target.value);
        
        // Sincronizar el otro input
        const otherInput = e.target.id === 'buscadorDestinos' ? inputDesktop : inputMobile;
        if (otherInput) otherInput.value = e.target.value;
      }
      
      if (inputMobile) {
        inputMobile.addEventListener('input', handleSearch);
      }
      
      if (inputDesktop) {
        inputDesktop.addEventListener('input', handleSearch);
      }
    });
  </script>
</section>